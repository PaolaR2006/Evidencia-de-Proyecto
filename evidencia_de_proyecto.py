# -*- coding: utf-8 -*-
"""Evidencia de proyecto

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QGF4P-rwOr9xkl8yw9GnKdA3riTx-6x_
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

#importar imagen
img = cv2.imread("verde.jpg")

#convertir a distintos espacios de color
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img_gray_rgb = cv2.cvtColor(img_gray, cv2.COLOR_GRAY2RGB)

#rangos de color en hsv
lower_red1 = np.array([0, 100, 100], dtype=np.uint8)
upper_red1 = np.array([10, 255, 255], dtype=np.uint8)

lower_red2 = np.array([160, 100, 100], dtype=np.uint8)
upper_red2 = np.array([179, 255, 255], dtype=np.uint8)

lower_green = np.array([40, 60, 60], dtype=np.uint8)
upper_green = np.array([85, 255, 255], dtype=np.uint8)

lower_yellow = np.array([20, 80, 80], dtype=np.uint8)
upper_yellow = np.array([35, 255, 255], dtype=np.uint8)

lower_purple = np.array([125, 50, 50], dtype=np.uint8)
upper_purple = np.array([155, 255, 255], dtype=np.uint8)

lower_black = np.array([0, 0, 0], dtype=np.uint8)
upper_black = np.array([179, 255, 50], dtype=np.uint8)

#crear máscaras por color
mask_red1 = cv2.inRange(img_hsv, lower_red1, upper_red1)
mask_red2 = cv2.inRange(img_hsv, lower_red2, upper_red2)
mask_red = cv2.bitwise_or(mask_red1, mask_red2)

mask_green = cv2.inRange(img_hsv, lower_green, upper_green)
mask_yellow = cv2.inRange(img_hsv, lower_yellow, upper_yellow)
mask_purple = cv2.inRange(img_hsv, lower_purple, upper_purple)
mask_black = cv2.inRange(img_hsv, lower_black, upper_black)

#aplicar máscaras a la imagen original
result_red = cv2.bitwise_and(img_rgb, img_rgb, mask=mask_red)
result_green = cv2.bitwise_and(img_rgb, img_rgb, mask=mask_green)
result_yellow = cv2.bitwise_and(img_rgb, img_rgb, mask=mask_yellow)
result_purple = cv2.bitwise_and(img_rgb, img_rgb, mask=mask_purple)
result_black = cv2.bitwise_and(img_rgb, img_rgb, mask=mask_black)

#contar pixeles de cada color
pix_colores = {
    "Roja": int(np.count_nonzero(mask_red)),
    "Verde": int(np.count_nonzero(mask_green)),
    "Amarilla": int(np.count_nonzero(mask_yellow)),
    "Morada": int(np.count_nonzero(mask_purple)),
    "Negra": int(np.count_nonzero(mask_black))
}

#obtener color dominante
color_max = max(pix_colores, key=pix_colores.get)

#seleccionar la máscara y el resultado del color detectado
masks = {
    "Roja": mask_red,
    "Verde": mask_green,
    "Amarilla": mask_yellow,
    "Morada": mask_purple,
    "Negra": mask_black
}
results = {
    "Roja": result_red,
    "Verde": result_green,
    "Amarilla": result_yellow,
    "Morada": result_purple,
    "Negra": result_black
}
mask_selected = masks[color_max]
result_selected = results[color_max]

#mezclar fondo gris con el color detectado
gray_plus_selected = cv2.addWeighted(img_gray_rgb, 1, result_selected, 1, 0)

#mensajes según bandera
mensajes = {
    "Verde": "Condiciones seguras",
    "Morada": "Prohibido ingresar por fauna peligrosa",
    "Amarilla": "Precaución y seguir indicaciones",
    "Negra": "Playa clausurada; riesgos graves",
    "Roja": "Prohibido ingresar; condiciones desfavorables"
}

#mostrar imagen original y resaltada
plt.figure(figsize=(14,7))

plt.subplot(1,2,1)
plt.imshow(img_rgb)
plt.title("Imagen original")
plt.axis("off")

plt.subplot(1,2,2)
plt.imshow(gray_plus_selected)
plt.title(f"Bandera detectada: {color_max}\n{mensajes[color_max]}")
plt.axis("off")

plt.show()

